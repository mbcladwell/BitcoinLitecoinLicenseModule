/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.8/userguide/java_library_plugin.html
 */

buildscript {
    dependencies {
      classpath files("build/classes/java/main")
   }
}


plugins {
    // Apply the java-library plugin to add support for Java Library
       id 'java-library'
}

version=0.1
//main = 'bllm.Main'


dependencies {
     //classpath files("build/classes/java/main")
 
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
	
	//JSON parsing
	compile 'com.google.code.gson:gson:2.8.5'

        //QR code library
        compile 'com.google.zxing:core:3.3.3'
        implementation 'com.google.zxing:core:3.3.3'
        compile 'com.google.zxing:javase:3.3.3'
        implementation 'com.google.zxing:javase:3.3.3'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}


task copyResources(type: Copy) {
   // from configurations.runtime
    from("src/main/resources/bllm/images")
    into("build/classes/java/main/bllm/images")
    include('*.png', '*.jpg')
}




task runMain(type: JavaExec, dependsOn: [copyResources]) {
  classpath = sourceSets.main.runtimeClasspath
 println 'in runMain'
  main = 'bllm.Main'
  // arguments to pass to the application
  //args 'appArg1'
}





task myJavadocs(type: Javadoc) {
  source = sourceSets.main.allJava
}


jar {
    manifest {
        attributes(
                'Main-Class': 'bllm.DialogLicenseManager',
                'Implementation-Title': 'Bitcoin/Litecoin License Manager',
                'Implementation-Version': version,
                'provider': 'net.stihie'
        )
    }
}



//update the local Maven repository
task updateMaven(type: Exec)  {

        executable "mvn"
	args "install:install-file", "-Dfile=build/libs/bllm-0.1.jar", "-DgroupId=net.stihie", "-DartifactId=bllm", "-Dversion=0.1", "-Dpackaging=jar"

}


//
/*
task runLicensed(type: JavaExec) {
 classpath = sourceSets.main.runtimeClasspath
 main = 'bllm.Main'

   doFirst{
 
	def lic = new bllm.License()
        println 'in runLicensed'

	lic.setLicenseID("inLicensed")
        lic.setCost(1)
        lic.setUnitsOfCost("Litecoin")
        lic.setRequiredConfirmations(3)
        lic.setLicenseExpiresInDays(3)
        lic.setTransactionExpiresInHours(3)
        lic.setTrialExpiresInDays(0)
        lic.setMerchantWalletID("mywalletid")
        lic.setLicenseGrantedDate(java.time.LocalDate.now())
        FileOutputStream file = new FileOutputStream("license.ser")
        ObjectOutputStream out = new ObjectOutputStream(file)
        out.writeObject(lic)
        out.close()
        file.close()
    
  
  }
}

*/

//get transactions at: https://live.blockcypher.com/ltc/
//get transactions json at: https://api.blockcypher.com/v1/ltc/main/txs/749456cd21f361dbcd6f29c0befa7c861dc061f48a6a9e3af1dce0fca5feb859


//transaction: 8e12900e5aa7d62892386a0e812994117c53a87d21da1591dc5e709a360cb541
//destination wallet: LZMQAsR68HHp5BiqSrqaEXyDhDa7fhoUgt
//amount: 0.2309 Litecoin
//date: 11/25/2018  9:40AM


task runTrial(type: JavaExec) {

  classpath = sourceSets.main.runtimeClasspath
  main = 'bllm.Main'

doFirst{
  classpath = sourceSets.main.runtimeClasspath

	def lic = new bllm.License()
      println 'in runTrial'
	lic.setLicenseID("inTrial")
        lic.setCost(1)
        lic.setUnitsOfCost("Litecoin")
	lic.setUnitsOfPayment('Litecoin')
        lic.setRequiredConfirmations(3)
        lic.setLicenseExpiresInDays(3)
        lic.setTransactionExpiresInHours(3)
        lic.setTrialExpiresInDays(4)
        lic.setMerchantWalletID("LZ56GFpLXiDeWsFfvgJPj84CX7o2BH7YfD")
        //lic.setLicenseGrantedDate(java.time.LocalDate.now())
	lic.setLicenseGrantedDate(java.time.LocalDate.parse("2017-12-12"))
	
       FileOutputStream file = new FileOutputStream("license.ser")
        ObjectOutputStream out = new ObjectOutputStream(file)
        out.writeObject(lic)
        out.close()
        file.close()
    }

    doLast{
	FileInputStream myfile = new FileInputStream("license.ser")
	ObjectInputStream input = new ObjectInputStream(myfile)

      // Method for serialization of object
	lic = (bllm.License)(input.readObject())

	input.close()
	myfile.close()
	println(myfile)
	println("Expires in days: " + String.valueOf(lic.getLicenseExpiresInDays()))


    }

    
}


